// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model User {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  password     String
  isResearcher Boolean        @default(false)
  institution  String?
  profile      UserProfile?
  collaborations Collaborator[]
  participations Participation[]
  savedStudies StudySaved[]
  ParticipantSaved ParticipantSaved[]

  accounts      Account[]
   sessions      Session[]
}

model UserProfile {
  id         String   @id @default(cuid())
  userId     String   @unique
  birth      DateTime?
  gender     String?
  genderOther     String?
  language   String[]
  languageOther   String?
  website    String?
  region     String?
  background String[]
  backgroundOther String?
  avatarBase       String?
  avatarAccessory  String?
  avatarBg         String?
  user       User     @relation(fields: [userId], references: [id])
}

model Study {
  id  String @id @default(cuid())
  name  String
  slug  String @unique
  description  String
  status StudyStatus
  recruitmentStatus RecruitmentStatus
  createdAt           DateTime @default(now())

  collaborators          Collaborator[]
  participations Participation[]
  participantSaved     ParticipantSaved[]
  participantWorkflow  ParticipantWorkflow?
  studyWorkflow        StudyWorkflow? 
  criteria              Criteria[]
  recruitment           Recruitment?
  form                  Form?
  StudySaved StudySaved[]
}

model Collaborator {
  id        String  @id @default(cuid())
  study     Study   @relation(fields: [studyId], references: [id], onDelete: Cascade)
  studyId   String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  role      CollaboratorRole  
  addedAt   DateTime @default(now())

  @@unique([studyId, userId]) 
}

model Participation {
  id                 String   @id @default(cuid())
  userId             String
  studyId            String
  status             ParticipationStatus
  inviteStatus       InviteStatus
  appliedAt          DateTime?
  invitedAt          DateTime?
  user               User     @relation(fields: [userId], references: [id])
  study              Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
  formResponses      FormResponse[]
  workflowStepStatuses ParticipantWorkflowStepStatus[]
  thankYouCertificate ThankYouCertificate?
}

model ParticipantWorkflowStepStatus {
  id            String   @id @default(cuid())
  stepId        String
  participationId String
  status        StepStatus
  completedAt   DateTime?

  step          ParticipantWorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  participation Participation           @relation(fields: [participationId], references: [id], onDelete: Cascade)
}

model ParticipantWorkflowStep {
  id              String   @id @default(cuid())
  workflowId      String
  name            String
  order           Int
  noteResearcher  String?
  noteParticipant String?
  deadline        DateTime?

  workflow        ParticipantWorkflow             @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  statuses        ParticipantWorkflowStepStatus[]
}

model ParticipantWorkflow {
  id        String   @id @default(cuid())
  studyId   String  @unique
  study     Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
  steps     ParticipantWorkflowStep[]
}

model StudyWorkflow {
  id        String             @id @default(cuid())
  studyId   String             @unique
  study     Study              @relation(fields: [studyId], references: [id], onDelete: Cascade)
  steps     StudyWorkflowStep[]
  
}

model StudyWorkflowStep {
  id              String                @id @default(cuid())
  workflowId      String
  name            String
  order           Int
  note            String?
  deadline        DateTime?
  workflow        StudyWorkflow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  statuses        StudyWorkflowStepStatus[]
}

model StudyWorkflowStepStatus {
  id        String           @id @default(cuid())
  stepId    String
  studyId   String           
  status    StepStatus
  completedAt DateTime?

  step      StudyWorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
}


model ParticipantSaved {
  id            String   @id @default(cuid())
  participantId String
  studyId       String

  participant   User     @relation(fields: [participantId], references: [id])
  study         Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
}

model StudySaved {
  id        String   @id @default(cuid())
  userId    String
  studyId   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  study     Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
}


model Criteria {
  id          String   @id @default(cuid())
  studyId     String
  type        ProfileField
  value       String[]
  matchLevel  CriteriaMatchLevel
  study       Study        @relation(fields: [studyId], references: [id], onDelete: Cascade)
}

model Recruitment {
  id        String   @id @default(cuid())
  studyId   String @unique
  study     Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
  description String?
  format             String[] 
  formatOther        String?   
  durationMinutes    Int?   
  sessionDetail String?
  criteriaDescription String?
  reward  String?
  image      String?
  avatarAccessoryResearcher      String?
  avatarBaseResearcher      String?
  thankYouMessage String?
  autoCloseSelectedCount   Int?      
  autoCloseApplicantCount  Int?      
  autoCloseDate            DateTime?
}

model Form {
  id          String   @id @default(cuid())
  studyId     String @unique
  description String?
  study       Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
  questions   FormQuestion[]
  responses   FormResponse[]
}

model FormQuestion {
  id          String   @id @default(cuid())
  formId      String
  text        String
  type        QuestionType
  required    Boolean
  evaluationType EvaluationType
  options     FormOption[]
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  answers FormAnswer[]
}

model FormOption {
  id       String   @id @default(cuid())
  questionId String
  text     String
  score    Int?
  question FormQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  selectedInAnswers FormAnswerSelectedOption[]
}

model FormResponse {
  id         String   @id @default(cuid())
  participationId String
  formId          String
  submittedAt DateTime
  answers     FormAnswer[]
  participation Participation @relation(fields: [participationId], references: [id], onDelete: Cascade)
form  Form          @relation(fields: [formId], references: [id], onDelete: Cascade) 
}

model FormAnswer {
  id        String   @id @default(cuid())
  responseId String
  questionId      String         
  text      String?

   response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question   FormQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptions FormAnswerSelectedOption[]
}

model FormAnswerSelectedOption {
  id           String   @id @default(cuid())
  answerId     String
  optionId     String

  answer       FormAnswer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  option       FormOption   @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([answerId, optionId]) 
}

model ThankYouCertificate {
  id               String   @id @default(cuid())
  participationId  String   @unique
  participation    Participation @relation(fields: [participationId], references: [id], onDelete: Cascade)
  
  studyName         String
  participantName  String
  researcherName   String
  
  image             String?
  message           String?
  avatarBaseParticipant String?
  avatarAccessoryParticipant String?
  avatarBaseResearcher String?
  avatarAccessoryResearcher String?
  createdAt        DateTime @default(now())
}


enum QuestionType {
  text
  single_choice
  multiple_choice
}

enum EvaluationType {
  automatic
  manual
  none
}



enum StudyStatus {
  draft
  ongoing
  ended
}

enum RecruitmentStatus {
  open
  closed
}

enum ParticipationStatus {
  Applied
  Invited
  Selected
  Rejected
  Withdrawn
  Completed
}

enum InviteStatus {
  pending
  accepted
  rejected
}

enum StepStatus {
  todo
  completed
}

enum CollaboratorRole {
  owner
  editor 
  viewer
}

enum CriteriaMatchLevel {
  Required 
  Optional
  // No Preference
}

enum ProfileField {
  gender
  language
  region
  background
  birth
}



